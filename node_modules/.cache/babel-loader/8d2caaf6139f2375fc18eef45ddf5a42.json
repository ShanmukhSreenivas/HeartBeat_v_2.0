{"ast":null,"code":"var _jsxFileName = \"/Users/shanmukhasreenivas/Documents/Files/heartbeat-v_2.0/src/components/gauge_final.js\";\nimport ReactSpeedometer from \"react-d3-speedometer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Gauge({\n  min,\n  max,\n  lim,\n  value\n}) {\n  const segmentstop = (min, max, lim, value) => {\n    const segment_stops = [];\n\n    if (lim > value) {\n      segment_stops = [min, min + 1, value, lim, lim + 3, max - 1, max];\n      return segment_stops;\n    } else if (lim == value) {\n      segment_stops = [min, min + 1, lim, lim + 3, max - 1, max];\n      return segment_stops;\n    } else {\n      segment_stops = [min, min + 1, lim, lim + 3, value, max - 1, max];\n      return segment_stops;\n    }\n  };\n\n  const segmentcolor = (lim, value) => {\n    const segment_colors = [];\n\n    if (lim > value) {\n      segment_colors = ['#ff7e00', '#ff7e00', '#edeceb', 'black', '#edeceb', '#edeceb'];\n      return segment_colors;\n    } else if (lim == value) {\n      segment_colors = ['green', 'green', 'black', '#edeceb', '#edeceb'];\n      return segment_colors;\n    } else {\n      segment_colors = ['red', 'red', 'black', 'red', '#edeceb', '#edeceb'];\n      return segment_colors;\n    }\n  };\n\n  const segmentlabel = (min, max, lim, value) => {\n    const segment_labels = [];\n\n    if (lim > value) {\n      segment_labels = [{\n        text: {\n          min\n        },\n        position: 'OUTSIDE',\n        color: \"black\"\n      }, {\n        color: \"white\"\n      }, {\n        color: \"white\"\n      }, {\n        color: \"white\"\n      }, {\n        color: \"white\"\n      }, {\n        text: {\n          max\n        },\n        position: 'OUTSIDE',\n        color: \"black\"\n      }];\n      return segment_labels;\n    } else if (lim == value) {\n      segment_labels = [{\n        text: {\n          min\n        },\n        position: 'OUTSIDE',\n        color: \"black\"\n      }, {\n        color: \"white\"\n      }, {\n        color: \"white\"\n      }, {\n        color: \"white\"\n      }, {\n        text: {\n          max\n        },\n        position: 'OUTSIDE',\n        color: \"black\"\n      }];\n      return segment_labels;\n    } else {\n      segment_labels = [{\n        text: {\n          min\n        },\n        position: 'OUTSIDE',\n        color: \"black\"\n      }, {\n        color: \"white\"\n      }, {\n        color: \"white\"\n      }, {\n        color: \"white\"\n      }, {\n        text: {\n          max\n        },\n        position: 'OUTSIDE',\n        color: \"black\"\n      }];\n      return segment_labels;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ReactSpeedometer, {\n    width: 150,\n    height: 100,\n    ringWidth: 20,\n    minValue: min,\n    maxValue: max,\n    value: value,\n    segments: 2,\n    needleHeightRatio: 0.2,\n    needleColor: \"white\",\n    customSegmentStops: segmentstop(min, max, lim, value),\n    customSegmentLabels: segmentlabel(min, max, lim, value),\n    segmentColors: segmentcolor(lim, value),\n    maxSegmentLabels: 1,\n    valueTextFontSize: \"14px\",\n    labelFontSize: \"10px\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_c = Gauge;\n\nvar _c;\n\n$RefreshReg$(_c, \"Gauge\");","map":{"version":3,"sources":["/Users/shanmukhasreenivas/Documents/Files/heartbeat-v_2.0/src/components/gauge_final.js"],"names":["ReactSpeedometer","Gauge","min","max","lim","value","segmentstop","segment_stops","segmentcolor","segment_colors","segmentlabel","segment_labels","text","position","color"],"mappings":"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","sourcesContent":["import ReactSpeedometer from \"react-d3-speedometer\"\n\nexport default function Gauge({ min, max, lim, value}) {\n\n    const segmentstop = (min,max,lim,value) => {\n        const segment_stops = []\n        if(lim > value){\n            segment_stops = [min,min+1,value,lim,lim+3,max-1,max]\n            return segment_stops\n        }\n        else if(lim == value){\n            segment_stops = [min,min+1,lim,lim+3,max-1,max]\n            return segment_stops\n        }\n        else{\n            segment_stops = [min,min+1,lim,lim+3,value,max-1,max]\n            return segment_stops\n        }\n    }\n    const segmentcolor = (lim,value) => {\n        const segment_colors = []\n        if(lim > value){\n            segment_colors = ['#ff7e00','#ff7e00','#edeceb','black','#edeceb','#edeceb']\n            return segment_colors\n        }\n        else if(lim == value){\n            segment_colors = ['green','green','black','#edeceb','#edeceb']\n            return segment_colors\n        }\n        else{\n            segment_colors = ['red','red','black','red','#edeceb','#edeceb']            \n            return segment_colors\n        }\n\n    }\n    const segmentlabel = (min,max,lim,value) => {\n        const segment_labels = []\n        if(lim > value){\n            segment_labels = [{ text:{min},position:'OUTSIDE',color:\"black\"},{color:\"white\"},{color:\"white\"},{color:\"white\"},{color:\"white\"},{ text:{max},position:'OUTSIDE',color:\"black\"}]\n            return segment_labels\n        }\n        else if(lim == value){\n            segment_labels = [{ text:{min},position:'OUTSIDE',color:\"black\"},{color:\"white\"},{color:\"white\"},{color:\"white\"},{ text:{max},position:'OUTSIDE',color:\"black\"}]            \n            return segment_labels\n        }\n        else{\n            segment_labels = [{ text:{min},position:'OUTSIDE',color:\"black\"},{color:\"white\"},{color:\"white\"},{color:\"white\"},{ text:{max},position:'OUTSIDE',color:\"black\"}]            \n            return segment_labels\n        }\n    }\n\n\nreturn(  \n    \n  \n    <ReactSpeedometer\n        width={150}\n        height={100}\n        ringWidth={20} \n        minValue={min}\n        maxValue={max}\n        value={value}    \n        segments={2}\n        needleHeightRatio={0.2}\n        needleColor=\"white\"\n        customSegmentStops={segmentstop(min,max,lim,value)}\n        customSegmentLabels={segmentlabel(min,max,lim,value)}\n        segmentColors={segmentcolor(lim,value)}\n        maxSegmentLabels={1}\n        valueTextFontSize='14px'\n        labelFontSize='10px'\n    />\n);\n}"]},"metadata":{},"sourceType":"module"}